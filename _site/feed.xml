<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-10T10:23:08+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">DoubleJ’s World</title><subtitle>An amazing website.</subtitle><author><name>Jaejin Kim</name><email>jaejin.km@gmail.com</email></author><entry><title type="html">Java8 Functional Interface</title><link href="http://localhost:4000/java/java8-functional-interface/" rel="alternate" type="text/html" title="Java8 Functional Interface" /><published>2022-04-07T00:00:00+09:00</published><updated>2022-04-07T01:50:00+09:00</updated><id>http://localhost:4000/java/java8-functional-interface</id><content type="html" xml:base="http://localhost:4000/java/java8-functional-interface/"><![CDATA[<h1 id="1-함수형-인터페이스-functional-interface">1. 함수형 인터페이스 (Functional Interface)</h1>

<h2 id="11-java-에서의-functional-interface">1.1. Java 에서의 Functional Interface</h2>

<p>SAM(Single Abstract Method) 인 Interface 는 모두 Functional Interface 이다. 즉, 추상메소드를 딱 하나만 가지고 있는 인터페이스를 의미한다. (Object 클래스로부터 상속 받은 메소드는 제외한다.)</p>

<p>위 의 조건을 만족하는 인터페이스는 Functional Interface 로 인지되며, 람다 표현식에 적용이 가능하다.</p>

<p>만약 Functional Interface 임을 명시적으로 알려야 할 필요가 있을경우는 @FunctionalInterface 애노테이션을 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Blah</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">();</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="12-java-에서-기본-제공하는-잘-알려진-functional-interface">1.2. Java 에서 기본 제공하는 잘 알려진 Functional Interface</h2>

<h3 id="functiont-r">Function&lt;T, R&gt;</h3>

<p>파라미터 1개, 리턴 1개 형태의 apply() 형태의 SAM 표현</p>

<ul>
  <li>T : 입력값 타입</li>
  <li>R : 리턴값 타입</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">R</span> <span class="nf">apply</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
</code></pre></div></div>

<p>compose(), andThen() 으로 조합해서 사용 가능</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">plus5</span> <span class="o">=</span> <span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">value</span> <span class="o">+</span> <span class="mi">5</span><span class="o">;</span> 
<span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">mul2</span> <span class="o">=</span> <span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">value</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span> 

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">plus5</span><span class="o">.</span><span class="na">compose</span><span class="o">(</span><span class="n">mul2</span><span class="o">).</span><span class="na">apply</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span> <span class="c1">// (3 * 2) + 5 </span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">plus5</span><span class="o">.</span><span class="na">andThen</span><span class="o">(</span><span class="n">mul2</span><span class="o">).</span><span class="na">apply</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span> <span class="c1">// (3 + 5) * 2</span>
</code></pre></div></div>

<h3 id="bifunctiont-u-r">BiFunction&lt;T, U, R&gt;</h3>

<p>파라미터 2개, 리턴 1개 형태의 apply() 형태의 SAM 표현</p>

<ul>
  <li>T : 첫 번째 입력값 타입</li>
  <li>U : 두 번째 입력값 타입</li>
  <li>R : 리턴 타입</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">R</span> <span class="nf">apply</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">,</span> <span class="no">U</span> <span class="n">t</span><span class="o">);</span>
</code></pre></div></div>

<p>andThen 으로 Function&lt;T, R&gt; 조합 사용가능</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BiFunction</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">func1</span> <span class="o">=</span> <span class="o">(</span><span class="n">val1</span><span class="o">,</span> <span class="n">val2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">val1</span> <span class="o">*</span> <span class="n">val2</span><span class="o">;</span>  
<span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">func2</span> <span class="o">=</span> <span class="o">(</span><span class="n">val1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">val1</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>  

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">func1</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span> <span class="o">);</span>  <span class="c1">// 6</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">func1</span><span class="o">.</span><span class="na">andThen</span><span class="o">(</span><span class="n">func2</span><span class="o">).</span><span class="na">apply</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">));</span> <span class="c1">// 7</span>
</code></pre></div></div>

<h3 id="consumer-t-">Consumer&lt; T &gt;</h3>

<p>파라미터 1개, 리턴값은 없는 accept() 형태의 SAM 표현.
파라미터를 전달받아 소비해버리는 이미지임</p>

<ul>
  <li>T : 입력 값 타입</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">supplier</span> <span class="o">=</span> <span class="o">(</span><span class="n">val</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"val : "</span> <span class="o">+</span> <span class="n">val</span><span class="o">);</span>  

<span class="n">supplier</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="s">"Jack"</span><span class="o">);</span>  <span class="c1">// val : Jack</span>
</code></pre></div></div>

<h3 id="supplier-t-">Supplier&lt; T &gt;</h3>

<p>파라미터는 없고, 리턴값만 존재하는 get() 형태의 SAM 표현
무언가를 제공해주는 이미지임</p>

<ul>
  <li>T : 리턴 타입</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">T</span> <span class="nf">get</span><span class="o">();</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.function.Supplier</span><span class="o">;</span>  

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>  

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>  

    <span class="kd">protected</span> <span class="nf">Foo</span><span class="o">()</span> <span class="o">{}</span>  
    <span class="kd">public</span> <span class="nf">Foo</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span> <span class="o">}</span>  

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span> <span class="o">}</span>  

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  

        <span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">Foo</span><span class="o">&gt;</span> <span class="n">supplier</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">Foo</span><span class="o">(</span><span class="s">"guest"</span><span class="o">);</span>  
        <span class="nc">Foo</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">supplier</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>  
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">foo</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>  <span class="c1">// guest</span>

    <span class="o">}</span>  
<span class="o">}</span>
</code></pre></div></div>

<h3 id="predicate-t-">Predicate&lt; T &gt;</h3>

<p>파라미터는 1개, 리턴값은 boolean. test() 형태의 SAM 표현 
무언가의 판단(true/false) 의 근거가 되는 값을 판정(test) 해 주는 이미지임.</p>

<ul>
  <li>T : 입력 값 타입</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">)</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Predicate</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">pred1</span> <span class="o">=</span> <span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span> 
<span class="nc">Predicate</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">pred2</span> <span class="o">=</span> <span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">;</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pred1</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">pred2</span><span class="o">).</span><span class="na">test</span><span class="o">(</span><span class="mi">12</span><span class="o">));</span> <span class="c1">// false </span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pred1</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">pred2</span><span class="o">).</span><span class="na">test</span><span class="o">(</span><span class="mi">8</span><span class="o">));</span> <span class="c1">// true </span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pred1</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="mi">8</span><span class="o">));</span> <span class="c1">// true </span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pred1</span><span class="o">.</span><span class="na">negate</span><span class="o">().</span><span class="na">test</span><span class="o">(</span><span class="mi">8</span><span class="o">));</span> <span class="c1">// false</span>
</code></pre></div></div>

<blockquote>
  <p>그 외 BiFunction 에서의 모든 입,출력값 타입이 동일하다던가.. 등의 
경우를 위해 여러가지 Functional Interface 를 제공하고있으며 해당 내용은 아래 링크 참조</p>
</blockquote>

<hr />

<p>https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.8</p>

<p>https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html</p>]]></content><author><name>Jaejin Kim</name><email>jaejin.km@gmail.com</email></author><category term="java" /><category term="java" /><category term="java8" /><summary type="html"><![CDATA[Java8 - Functional Interface]]></summary></entry><entry><title type="html">버전 표시도 스펙이 있을까? - Sementic Versioning (SemVer)</title><link href="http://localhost:4000/version/sementic-versioning/" rel="alternate" type="text/html" title="버전 표시도 스펙이 있을까? - Sementic Versioning (SemVer)" /><published>2021-12-15T00:00:00+09:00</published><updated>2021-12-15T19:00:00+09:00</updated><id>http://localhost:4000/version/sementic-versioning</id><content type="html" xml:base="http://localhost:4000/version/sementic-versioning/"><![CDATA[<h2 id="1-버전-네이밍-기준">1. 버전 네이밍 기준</h2>

<p>버전 관리에 대한 정의를 확인하던 중 Semantic Versioning 이라는 Spec 이 존재하는 것을 확인하여 요약을 하였다. 스펙이라고하면 거창할지 모르지만 결국 모든 스펙은 체계적으로 잘 구축해보자는 것이 목표이다. 이미 훌륭한 분이 <a href="https://semver.org/">Semantic Versioning</a> 이라고하는 권고 스펙을 정의를 해두었다. <a href="https://semver.org/">Semantic Versioning</a> 은 그라바타(Gravatars)의 창시자이자 깃헙(GitHub)의 공동창업자인 <a href="https://tom.preston-werner.com">톰 프레스턴-베르너</a> 가 작성했으며, 흔히 오픈소스에서 사용하는 버전 체계의 기준이 되고 있다.</p>

<h2 id="2-semantic-versioning-의-포맷">2. Semantic Versioning 의 포맷</h2>

<p><img src="/assets/images/posts/2021/20211215_semver1.png" alt="sementic versioning format" />
흔히 볼 수 있는 버전 표기의 형태는 위와 같다. x, y, z 는 증가하는 자연수(음이 아닌 정수)형태로 표시되며, 절대로 0이 앞에 붙어서는 안된다 (예: 1.0.03 과 같은 버전 표기는 하지 말아야한다). 
그리고 위에서 표시된 <strong>x, y, z 는 각각 Major, Minor, Patch 의 버전을 의미한다.</strong></p>

<h3 id="21-major">2.1. Major</h3>

<p><strong>프로그램의 기능적 변경이 이전 버전과 호환되지 않을 경우 Major 버전을 증가시킨다.</strong> Major 버전이 증가된 경우에는  Minor와 Patch 버전은 0으로 리셋시켜야 한다. 예를들어 현재 프로그램의 버전이 1.2.5 이고 다음 버전이 현재버전과 호환되지 않는 기능적 추가나 변경이 일어났다면 새버전은 2.0.0 이 되어야 한다.</p>

<h3 id="22-minor">2.2. Minor</h3>

<p><strong>프로그램이 이전 버전과 호환에 문제가 없는 상태에서 프로그램의 기능적 변경이나 추가가 이루어질 경우 Minor 버전을 증가시킨다</strong>. 예를들어 현재 프로그램의 버전이 1.2.5 이고 다음 버전이 현재버전과 호환되는 상태에서 기능적 추가나 변경이 일어났다면 새버전은 1.3.0 이 되어야 한다.</p>

<h3 id="23-patch">2.3. Patch</h3>

<p>프로그램이 <strong>이전 버전과 호환에 문제가 없는 상태에서 Bug fix 등을 위한 변경이 이루어질 경우 Patch 버전을 증가</strong>시킨다.</p>

<h3 id="24-pre-release-와-build">2.4. Pre-Release 와 Build</h3>

<p>Patch 버전 뒤에 프로그램의 Pre-release label 이나 Build number 같은 메타데이터를 위한 정보를 추가적으로 표시할 수 있다. 예를들어 <em>1.0.0-alpha.1</em> 이라고 표시된 버전의 경우 라면, 1.0.0 버전의 정식 배포를 앞둔 버전이며 내부적으로 alpha.1 이라고 라벨링 했다는 것을 알 수 있다.</p>

<p>Build metadata 는 Patch 버전 뒤에 더하기(+) 기호를 붙인 뒤에 마침표로 구분된 식별자를 덧붙여서 표현한다. 필요하다면 간단한 단어를 표기할 수 있다. (예 : 1.0.0-beta+exp.sha.5114f85)</p>

<p>참고로 Build metadata 는 우선순위에 영향을 주지 않는다.</p>

<h2 id="semver-규칙을-확인-할-수-있는-정규-표현식">SemVer 규칙을 확인 할 수 있는 정규 표현식</h2>

<p><a href="https://semver.org/">semver.org</a> 의 하단부 FAQ 에 보면 Sementic Versioning 에서 권고하는 규칙에 맞는 버전포맷인지 확인 할 수 있는 정규표현식과 링크를 볼 수 있으므로 관심이 있다면 참고해보자.</p>

<p>Capture Group 명을 지원하는경우 (major, minor, patch…)
<a href="https://regex101.com/r/Ly7O1x/3/">https://regex101.com/r/Ly7O1x/3/</a></p>

<pre><code class="language-regex">^(?P&lt;major&gt;0|[1-9]\d*)\.(?P&lt;minor&gt;0|[1-9]\d*)\.(?P&lt;patch&gt;0|[1-9]\d*)(?:-(?P&lt;prerelease&gt;(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P&lt;buildmetadata&gt;[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
</code></pre>

<p>Capture Group 명을 지원하지 않는 경우</p>

<p><a href="https://regex101.com/r/vkijKf/1/">https://regex101.com/r/vkijKf/1/</a></p>

<pre><code class="language-regex">^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
</code></pre>

<h2 id="참고자료">참고자료</h2>

<ul>
  <li>
    <p><a href="https://semver.org/">https://semver.org/</a></p>
  </li>
  <li>
    <p><a href="https://www.baeldung.com/cs/semantic-versioning">https://www.baeldung.com/cs/semantic-versioning</a></p>
  </li>
</ul>]]></content><author><name>Jaejin Kim</name><email>jaejin.km@gmail.com</email></author><category term="version" /><category term="version" /><summary type="html"><![CDATA[버전 표시도 스펙이 있을까? - Sementic Versioning (SemVer)]]></summary></entry><entry><title type="html">트랜잭션에서의 ACID</title><link href="http://localhost:4000/db/transaction_acid1/" rel="alternate" type="text/html" title="트랜잭션에서의 ACID" /><published>2021-12-09T00:00:00+09:00</published><updated>2021-12-09T12:00:00+09:00</updated><id>http://localhost:4000/db/transaction_acid1</id><content type="html" xml:base="http://localhost:4000/db/transaction_acid1/"><![CDATA[<h1 id="트랜잭션-acid">트랜잭션 ACID</h1>

<h3 id="트랜잭션-transaction">트랜잭션 (Transaction)</h3>

<p>트랜잭션이란 질의(query)를 하나의 묶음으로 처리하도록하는 작업수행의 논리적 단위 입니다.</p>

<p>트랜잭션은 ACID(원자성, 일관성, 독립성, 지속성)라는 특성을 만족해야합니다.</p>

<h3 id="원자성-atomicity">원자성 (Atomicity)</h3>

<p>트랜잭션의 작업이 부분적으로 실행되거나 중단되지 않음을 보장하는 특성입니다.</p>

<p>흔히 All or Nothing 이라고 부르는 개념으로 작업단위를 일부분만 실행하지 않고 실행이 되지 않는 상황이면 아무것도 실행되지 않아야하며 실행이 되었다면 실행되어야하는 영역(트랜잭션영역)은 모두 실행되어야 하는 특성입니다.</p>

<h3 id="일관성-consistency">일관성 (Consistency)</h3>

<p>트랜잭션이 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터 베이스를 유지하는 것을 의미합니다.</p>

<p>일관성이라는 특성은 여러가지 상황에 대한 일관성을 함축적으로 표현하는 특성입니다.</p>

<p>무결성 제약이 존재한다면 어느 트랜잭션은 무결성 제약이 적용되고 또 어떤 트랜잭션은 무결성제약이 적용되지 않고 하는 상황이 생기지 않아야하는 경우나, 고객의 잔고를 표현하는 데이터타입이 정수형이라면 예외적인 트랜잭션이 없이 모든 트랜잭션이 정수형으로 사용해야하는 경우 등 , 일반적으로 RDBMS 에서 언급되는 제약들은 모두 일관성 있게 적용되어야한다는 특성입니다.</p>

<h3 id="독립성-isolation">독립성 (Isolation)</h3>

<p>고립성, 격리성 이라고도 부르는 이 특성은 모든 트랜잭션은 다른 트랜잭션으로 부터 독립 되어야 한다는 특성입니다.</p>

<p>트랜잭션 작업 수행 중에는 다른 트랜잭션에 영향을 주어서도 안되며, 다른 트랜잭션들에 의해서 간섭을 받아서도 안됩니다. 영향을 받게 된다면 전혀 다른 동작이 이루어 질 수 도 있습니다.</p>

<h3 id="지속성-durability">지속성 (Durability)</h3>

<p>성공적으로 수행된 트랜잭션은 영원히 반영되어야함을 의미합니다. 트랜잭션이 성공적으로 수행되었다면 해당 트랜잭셔에 대한 로그까지 남아야하며 만약 시스템 오류가 발생하더라도 해당 기록은 영구적으로 기록되어야 있어야 합니다. 즉, commit 이 완료되었다면 commit 도중 시스템 오류가 발생했더라도 작업 완료에 대한 기록은 남아있어야하며 이를 기반으로 데이터 자체는 정상적으로 유지되어야 합니다.</p>]]></content><author><name>Jaejin Kim</name><email>jaejin.km@gmail.com</email></author><category term="db" /><summary type="html"><![CDATA[트랜잭션에서의 acid]]></summary></entry><entry><title type="html">miniDLNA 구동 후 접속 기기에서 파일이 보이지 않을경우</title><link href="http://localhost:4000/linux/Minidlna-troubleshooting1/" rel="alternate" type="text/html" title="miniDLNA 구동 후 접속 기기에서 파일이 보이지 않을경우" /><published>2021-10-27T00:00:00+09:00</published><updated>2021-10-28T02:00:00+09:00</updated><id>http://localhost:4000/linux/Minidlna-troubleshooting1</id><content type="html" xml:base="http://localhost:4000/linux/Minidlna-troubleshooting1/"><![CDATA[<h3 id="minidlna-">miniDLNA ?</h3>

<p>손쉽게 미디어 서버를 구축할 수 있는 miniDLNA 라는 서버가 있으며, DLNA/UPnP 를 지원하는 스마트 TV 나 그에 대응되는 기기가 있을 경우 동일 네트워크 상에서 손쉽게 영상 플레이 등이 가능합니다.</p>

<p>현재 이문서는 miniDLNA 설치를 다루지는 않으며, 파일이 보이지 않을경우의 트러블 슈팅만 언급하겠습니다.</p>

<h3 id="파일이-보이지-않을-경우에는-status-확인">파일이 보이지 않을 경우에는 status 확인</h3>

<p>miniDLNA 명령어 옵션 중 Status  를 확인할 수 있는 status 옵션이 있습니다. 해당 옵션으로 실행 하면 miniDLNA 의 상태를 확인 할 수 있습니다. (service minidlna status)</p>

<p><img src="/assets/images/posts/2021/20211027_minidlna1.png" alt="minidlna status" /></p>

<p>파일이 보이지 않을 경우에 고려해봐야할 점은 네트워크 설정, miniDLNA 구동 여부 등을 먼저 확인해봐야하지만 위의 경우에는 동영상 파일이 존재하는 위치의 디렉토리의 권한 접근 문제가 발생하여 에러가 발생하고 있는 중 입니다.</p>

<h3 id="권한-설정-변경">권한 설정 변경</h3>

<p>해당 디렉토리의 권한을 chmod 명령어로 변경해도 무방할 것으로 보이나, 여기서는 miniDLNA 데몬의 실행시 권한을 변경할 것 입니다.</p>

<p>흔히 포트나 영상파일이 존재하는 미디어 디렉토리를 설정하는 /etc/minidlna.conf 설정 파일 외에 miniDLNA 구동시 참조하는 초기 스크립트 관련 파일이 존재하는데 해당 파일에서 USER 와 GROUP 으로 표시되어있는 실행권한을 root 로 변경합니다.</p>

<blockquote>
  <p>sudo vi /etc/minidlna</p>
</blockquote>

<p><img src="/assets/images/posts/2021/20211027_minidlna2.png" alt="minidlna init config" /></p>

<p>설정 변경 후 minidlna 을 재시작 한후 status 를 확인하면 다음과 같이 정상적으로 실행 중임을 알 수 있으며, 동일네트워크의 DLNA 을 접근할 수 있는 기기를 확인하면 미디어 디렉토리에 존재하는 동영상을 볼 수 있습니다.</p>

<p><img src="/assets/images/posts/2021/20211027_minidlna3.png" alt="minidlna result" /></p>]]></content><author><name>Jaejin Kim</name><email>jaejin.km@gmail.com</email></author><category term="linux" /><summary type="html"><![CDATA[miniDLNA 구동 후 접속 기기에서 파일이 보이지 않을 경우 혹은 miniDLNA 상태가 에러인경우]]></summary></entry><entry><title type="html">Start History</title><link href="http://localhost:4000/Start-History/" rel="alternate" type="text/html" title="Start History" /><published>2021-10-26T00:00:00+09:00</published><updated>2021-10-26T00:00:00+09:00</updated><id>http://localhost:4000/Start-History</id><content type="html" xml:base="http://localhost:4000/Start-History/"><![CDATA[<p>Hello First Post!!!</p>

<p>첫 번째 포스팅입니다.</p>]]></content><author><name>Jaejin Kim</name><email>jaejin.km@gmail.com</email></author><summary type="html"><![CDATA[Hello First Post!!!]]></summary></entry></feed>